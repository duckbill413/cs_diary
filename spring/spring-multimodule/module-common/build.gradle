plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'java-library' // api 선언을 위해서 필요
}

group = 'dev.be'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    /**
     * api로 선언된 의존성을 소비자의 compile classpath와 runtime classpath를 모두 포함
     * 반면, implementation 은 내부에서 사용된는 의존성을 선언하는데 사용됩니다.
     * 즉, implementation 을 사용하여 선언된 의존성은 해당 모듈 내부에서만 사용되고, 다른 모듈에서 노출되지 않는다.
     * 모듈 내부의 implementation 으로 선언된느 라이브러리의 변경 사항은 다른 모듈에 영향을 주지 않는다.
     */
    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'mysql:mysql-connector-java'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.bootJar { enabled = false } // default: true -> common module 은 실행 가능한 jar 파일을 만들 필요 없음
tasks.jar { enabled = true } // default: true
// xxx.jar
// xxx-plain.jar plain으로 생성된 것 dependency를 가지지 않는다. 즉, 클래스와 리소스만을 포함한다. 따라서 서버를 실행 시킬 수 없다.
// ./gradlew clean :module-api:buildNeeded --stacktrace --info --refresh-dependencies -x test
// -x test 옵션은 테스트 코드를 체크하는 단계를 스킵하는 옵션